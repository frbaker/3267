// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBaseleftFrontMotor;
std::shared_ptr<SpeedController> RobotMap::driveBaserightFrontMotor;
std::shared_ptr<SpeedController> RobotMap::driveBaseleftRearMotor;
std::shared_ptr<SpeedController> RobotMap::driveBaserightRearMotor;
std::shared_ptr<RobotDrive> RobotMap::driveBaseRobotDrive41;
std::shared_ptr<SpeedController> RobotMap::ballShooterballShooterMotor;
std::shared_ptr<Encoder> RobotMap::ballShooterballShooterEncoder;
std::shared_ptr<PIDController> RobotMap::ballShooterballShooterController;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveBaseleftFrontMotor.reset(new TalonSRX(0));
    lw->AddActuator("driveBase", "leftFrontMotor", std::static_pointer_cast<TalonSRX>(driveBaseleftFrontMotor));
    
    driveBaserightFrontMotor.reset(new TalonSRX(1));
    lw->AddActuator("driveBase", "rightFrontMotor", std::static_pointer_cast<TalonSRX>(driveBaserightFrontMotor));
    
    driveBaseleftRearMotor.reset(new TalonSRX(2));
    lw->AddActuator("driveBase", "leftRearMotor", std::static_pointer_cast<TalonSRX>(driveBaseleftRearMotor));
    
    driveBaserightRearMotor.reset(new TalonSRX(3));
    lw->AddActuator("driveBase", "rightRearMotor", std::static_pointer_cast<TalonSRX>(driveBaserightRearMotor));
    
    driveBaseRobotDrive41.reset(new RobotDrive(driveBaseleftFrontMotor, driveBaseleftRearMotor,
              driveBaserightFrontMotor, driveBaserightRearMotor));
    
    driveBaseRobotDrive41->SetSafetyEnabled(true);
        driveBaseRobotDrive41->SetExpiration(0.1);
        driveBaseRobotDrive41->SetSensitivity(0.5);
        driveBaseRobotDrive41->SetMaxOutput(1.0);

    ballShooterballShooterMotor.reset(new Talon(4));
    lw->AddActuator("ballShooter", "ballShooterMotor", std::static_pointer_cast<Talon>(ballShooterballShooterMotor));
    
    ballShooterballShooterEncoder.reset(new Encoder(1, 2, false, Encoder::k4X));
    lw->AddSensor("ballShooter", "ballShooterEncoder", ballShooterballShooterEncoder);
    ballShooterballShooterEncoder->SetDistancePerPulse(1.0);
    ballShooterballShooterEncoder->SetPIDSourceType(PIDSourceType::kRate);
    ballShooterballShooterController.reset(new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ ballShooterballShooterEncoder.get(), ballShooterballShooterMotor.get(), 0.02));
    lw->AddActuator("ballShooter", "ballShooterController", ballShooterballShooterController);
    ballShooterballShooterController->SetContinuous(false); ballShooterballShooterController->SetAbsoluteTolerance(0.2); 
        ballShooterballShooterController->SetOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
